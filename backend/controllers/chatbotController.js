// controllers/chatbotController.js
const { GoogleGenerativeAI } = require("@google/generative-ai")
const { getFullContext } = require("../utils/getFullContext")
const Schedule = require("../models/mongoScheduleModel")
const dotenv = require("dotenv")
dotenv.config()

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)

const chatbotMessage = async (req, res) => {
  const { userID, message } = req.body
  if (!userID || !message) return res.status(400).json({ error: "Missing userID or message" })

    console.log("Your message:", message)
  try {
    const context = await getFullContext(userID)
    if (!context) return res.status(404).json({ error: "Context not found for user" })

    const { major, catalogYear, classesTaken, catalogClasses, currentSchedule } = context

    const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash" })
    const prompt = `You are an academic scheduling assistant. Given the following user context and input, return a JSON response.

User Context:
- Major: ${major}
- Catalog Year: ${catalogYear}
- Classes Taken: ${JSON.stringify(classesTaken)}
- Required Catalog Classes: ${JSON.stringify(catalogClasses)}
- Current Schedule: ${JSON.stringify(currentSchedule)}

User said: "${message}"

Respond in **one** of the following formats:

Passive:
{
  "type": "passive",
  "message": "string"
}

Active:
{
  "type": "active",
  "message": "string",
  "schedule": [
    {
      "course": "EECS 678",
      "location": "2415, LEEP2",
      "days": ["Monday", "Wednesday", "Friday"],
      "time": 10,
      "duration": 1
    }, ...
  ]
}`

    const result = await model.generateContent(prompt)
    const responseText = await result.response.text()

    let output
    try {
      output = JSON.parse(responseText)
    } catch (e) {
      const fallbackJSON = responseText.match(/\{[^]*\}/)?.[0]
      if (fallbackJSON) output = JSON.parse(fallbackJSON)
    }

    if (!output || !output.type || !output.message) {
      return res.status(500).json({ error: "Failed to parse AI response." })
    }

    if (output.type === "active" && Array.isArray(output.schedule)) {
      const sched = await Schedule.findOne({ userID }, {}, { sort: { lastEdited: -1 } })

      if (sched) {
        sched.classes = output.schedule
        sched.lastEdited = new Date()
        await sched.save()
      } else {
        await Schedule.create({
          userID,
          schedID: `${userID}-${Date.now()}`,
          semester: "generated",
          scheduleName: "Generated by Chatbot",
          classes: output.schedule
        })
      }

      return res.json({ type: "active", message: output.message, schedule: output.schedule })
    }
    console.log("AI response:", output.message)
    return res.json({ type: "passive", message: output.message })
  } catch (err) {
    console.error("‚ùå Chatbot error:", err.message)
    return res.status(500).json({ error: "AI failed to generate response" })
  }
}

module.exports = {
  chatbotMessage
}
